Magesh Kuppan

Schedule
Commence    : 9:30 AM
Tea Break   : 11:00 AM (20 Mins)
Lunch Break : 1:00 PM (1 Hr)
Tea Break   : 3:30 PM (20 mins)
Wind up     : 5:30 PM

Methodolgy:
    No powerpoint
    Hands on

About You
    Name
    Total Experience
    Primary Skillset
    Experience in Golang
    Any specific expectations?
        High Performance
        API design
        Profiling
        Testing (ginkgo)
        Design Patterns in Go

Day-01
    1. Basics
    2. Concurrency Patterns
    3. Basic HTTP Services
    4. Testing Basics
    5. Microbenchmarks

Day-02
    1. REST services
    2. Testing (mock )
    3. Profiling
    4. Code Generation
    5. Design Patterns

Day-03



HTTP
    TCP

1. Using net/http package
2. Using routing packages (libraries)

    router.register('/products', 'GET', getProducts)
    router.register('/products/{id}', 'GET', getProduct)
    router.register('/products/:id', 'GET', getProduct)

3. Using Frameworks
    c.JSON(200, data)

GET http://localhost:8000/products
GET http://localhost:8000/products/100?first=10&last=20


operation:
    add
    arguments:
        100
        200

<operation>
    <add>
        <arguments>
            <value>100</value>
            <value>200</value>
        </arguments>
    </add>
</operation>


binary serialization of objects (.net/java)

Transport
serialization & Deserialization
Data Formats

CORBA

Web
    Identity
        URI
            URN
            URL
    HTTP
    TCP/IP
        IP Address
    XML/JSON 

Web Services
    SOAP (XML Vocabulary)
    WSDL (XML Vocabulary)
    WS-Discovery

REST services
Data As a Resource
    URL
        http://www.myapi.com/products
    JSON
    Manipulating (HTTP VERBS)
        GET
        POST
        PUT
        DELETE
    HTTP Status Codes
    

Lost
    binary serialization
    JSON / XML
    Bidirectional commnuication
    Realtime updates

P101,Pen,10,100,Stationary
P102,Pencil,5,50,Stationary

GRPC
1. Define Schema
2. Generate Proxy & Stub
3. Server - Use the stub to expose the functionality
4. Client - Use the proxy to invoke the functionality

Commnuication Patterns
    1. Request-Response
    2. Client Streaming (many requests - one response)
    3. Server Streaming (one request - many responses)
    4. Bi-directional Streaming (many requests - many responses)

Tools for generating proxy & stub
    1. protoc-gen-go
    2. protoc-gen-go-grpc

    go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
    go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest

To generate the proxy & stub
    protoc --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative proto/service.proto

To run the tests
    go test -v -run Test*

    mocks
        https://github.com/vektra/mockery

        go get github.com/vektra/mockery/v2/.../
        go mod tidy

        To generate the mock types
            mockery --all --keeptree

To run the benchmarks
    go test ./... -bench=.

Code Coverage
    go test ./... --cover
    go test ./... --coverprofile=coverage.out
    go tool cover -html=coverage.out

Profiling
    go test ./... -bench=. -cpuprofile=cpu.prof

    To install pprof
        go get -u github.com/google/pprof

    go tool pprof cpu.prof
    go tool pprof -http=":8080" utils.test prof.cpu

    Using "github.com/pkg/profile"
        go get -u github.com/pkg/profile
        go build -o profile_test.out
        ./profile_test.out

Code Generate
    AST
    Template

    go generate ./...

